/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PreferenceUpdateChannelPreferencesRequest;
import com.konfigthis.client.model.PreferenceUpdateChannelPreferencesRequestChannelPreferencesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PreferenceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreferenceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PreferenceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getUserChannelPreferencesCall(String distinctId, String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriber/{distinct_id}/channel_preference"
            .replace("{" + "distinct_id" + "}", localVarApiClient.escapeString(distinctId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserChannelPreferencesValidateBeforeCall(String distinctId, String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distinctId' is set
        if (distinctId == null) {
            throw new ApiException("Missing the required parameter 'distinctId' when calling getUserChannelPreferences(Async)");
        }

        return getUserChannelPreferencesCall(distinctId, tenantId, _callback);

    }


    private ApiResponse<Object> getUserChannelPreferencesWithHttpInfo(String distinctId, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = getUserChannelPreferencesValidateBeforeCall(distinctId, tenantId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserChannelPreferencesAsync(String distinctId, String tenantId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserChannelPreferencesValidateBeforeCall(distinctId, tenantId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserChannelPreferencesRequestBuilder {
        private final String distinctId;
        private String tenantId;

        private GetUserChannelPreferencesRequestBuilder(String distinctId) {
            this.distinctId = distinctId;
        }

        /**
         * Set tenantId
         * @param tenantId to fetch user preferences for a particular brand (optional)
         * @return GetUserChannelPreferencesRequestBuilder
         */
        public GetUserChannelPreferencesRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for getUserChannelPreferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserChannelPreferencesCall(distinctId, tenantId, _callback);
        }


        /**
         * Execute getUserChannelPreferences request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserChannelPreferencesWithHttpInfo(distinctId, tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserChannelPreferences request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserChannelPreferencesWithHttpInfo(distinctId, tenantId);
        }

        /**
         * Execute getUserChannelPreferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserChannelPreferencesAsync(distinctId, tenantId, _callback);
        }
    }

    /**
     * Get User Preferences (Channel level)
     * API to get user channel preferences
     * @param distinctId distinct_id of the user whose preferences should be fetched (required)
     * @return GetUserChannelPreferencesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetUserChannelPreferencesRequestBuilder getUserChannelPreferences(String distinctId) throws IllegalArgumentException {
        if (distinctId == null) throw new IllegalArgumentException("\"distinctId\" is required but got null");
            

        return new GetUserChannelPreferencesRequestBuilder(distinctId);
    }
    private okhttp3.Call updateChannelPreferencesCall(String distinctId, String tenantId, PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = preferenceUpdateChannelPreferencesRequest;

        // create path and map variables
        String localVarPath = "/v1/subscriber/{distinct_id}/channel_preference"
            .replace("{" + "distinct_id" + "}", localVarApiClient.escapeString(distinctId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelPreferencesValidateBeforeCall(String distinctId, String tenantId, PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distinctId' is set
        if (distinctId == null) {
            throw new ApiException("Missing the required parameter 'distinctId' when calling updateChannelPreferences(Async)");
        }

        return updateChannelPreferencesCall(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest, _callback);

    }


    private ApiResponse<Object> updateChannelPreferencesWithHttpInfo(String distinctId, String tenantId, PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateChannelPreferencesValidateBeforeCall(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateChannelPreferencesAsync(String distinctId, String tenantId, PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelPreferencesValidateBeforeCall(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateChannelPreferencesRequestBuilder {
        private final String distinctId;
        private List<PreferenceUpdateChannelPreferencesRequestChannelPreferencesInner> channelPreferences;
        private String tenantId;

        private UpdateChannelPreferencesRequestBuilder(String distinctId) {
            this.distinctId = distinctId;
        }

        /**
         * Set channelPreferences
         * @param channelPreferences Use this to update channel level user preferences. Set &#x60;is_restricted - true&#x60; if the channel is opted_out by the user. This will only send critical notifications to the user which can&#39;t be opted out (optional)
         * @return UpdateChannelPreferencesRequestBuilder
         */
        public UpdateChannelPreferencesRequestBuilder channelPreferences(List<PreferenceUpdateChannelPreferencesRequestChannelPreferencesInner> channelPreferences) {
            this.channelPreferences = channelPreferences;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId to fetch user preferences for a particular brand (optional)
         * @return UpdateChannelPreferencesRequestBuilder
         */
        public UpdateChannelPreferencesRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for updateChannelPreferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest = buildBodyParams();
            return updateChannelPreferencesCall(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest, _callback);
        }

        private PreferenceUpdateChannelPreferencesRequest buildBodyParams() {
            PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest = new PreferenceUpdateChannelPreferencesRequest();
            preferenceUpdateChannelPreferencesRequest.channelPreferences(this.channelPreferences);
            return preferenceUpdateChannelPreferencesRequest;
        }

        /**
         * Execute updateChannelPreferences request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateChannelPreferencesWithHttpInfo(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateChannelPreferences request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest = buildBodyParams();
            return updateChannelPreferencesWithHttpInfo(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest);
        }

        /**
         * Execute updateChannelPreferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            PreferenceUpdateChannelPreferencesRequest preferenceUpdateChannelPreferencesRequest = buildBodyParams();
            return updateChannelPreferencesAsync(distinctId, tenantId, preferenceUpdateChannelPreferencesRequest, _callback);
        }
    }

    /**
     * Update User Preferences (Channel level)
     * API to update user channel preferences
     * @param distinctId distinct_id of the user whose preferences should be fetched (required)
     * @return UpdateChannelPreferencesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelPreferencesRequestBuilder updateChannelPreferences(String distinctId) throws IllegalArgumentException {
        if (distinctId == null) throw new IllegalArgumentException("\"distinctId\" is required but got null");
            

        return new UpdateChannelPreferencesRequestBuilder(distinctId);
    }
}
