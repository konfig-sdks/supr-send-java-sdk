/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.WorkflowConfigureTriggerRequest;
import com.konfigthis.client.model.WorkflowConfigureTriggerRequestDelivery;
import com.konfigthis.client.model.WorkflowConfigureTriggerRequestUsersInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call configureTriggerCall(String workspaceKey, WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowConfigureTriggerRequest;

        // create path and map variables
        String localVarPath = "/{workspace_key}/trigger"
            .replace("{" + "workspace_key" + "}", localVarApiClient.escapeString(workspaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configureTriggerValidateBeforeCall(String workspaceKey, WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceKey' is set
        if (workspaceKey == null) {
            throw new ApiException("Missing the required parameter 'workspaceKey' when calling configureTrigger(Async)");
        }

        return configureTriggerCall(workspaceKey, workflowConfigureTriggerRequest, _callback);

    }


    private ApiResponse<Object> configureTriggerWithHttpInfo(String workspaceKey, WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest) throws ApiException {
        okhttp3.Call localVarCall = configureTriggerValidateBeforeCall(workspaceKey, workflowConfigureTriggerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call configureTriggerAsync(String workspaceKey, WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = configureTriggerValidateBeforeCall(workspaceKey, workflowConfigureTriggerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConfigureTriggerRequestBuilder {
        private final String name;
        private final String template;
        private final String notificationCategory;
        private final List<WorkflowConfigureTriggerRequestUsersInner> users;
        private final String workspaceKey;
        private String data;
        private WorkflowConfigureTriggerRequestDelivery delivery;
        private String delay;
        private LocalDate triggerAt;
        private String brandId;
        private String $idempotencyKey;

        private ConfigureTriggerRequestBuilder(String name, String template, String notificationCategory, List<WorkflowConfigureTriggerRequestUsersInner> users, String workspaceKey) {
            this.name = name;
            this.template = template;
            this.notificationCategory = notificationCategory;
            this.users = users;
            this.workspaceKey = workspaceKey;
        }

        /**
         * Set data
         * @param data Mock data to replace the template variables. (optional, default to { \&quot;key\&quot;: { \&quot;k1\&quot;: \&quot;v1\&quot;, \&quot;k2\&quot;: \&quot;v2\&quot; } })
         * @return ConfigureTriggerRequestBuilder
         */
        public ConfigureTriggerRequestBuilder data(String data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set delivery
         * @param delivery  (optional)
         * @return ConfigureTriggerRequestBuilder
         */
        public ConfigureTriggerRequestBuilder delivery(WorkflowConfigureTriggerRequestDelivery delivery) {
            this.delivery = delivery;
            return this;
        }
        
        /**
         * Set delay
         * @param delay Workflow will be halted for the time mentioned in delay, and become active once the delay period is over. Format - &#x60;XXdXXhXXmXXs&#x60; or if its number (n) then delay is in seconds (n) (optional)
         * @return ConfigureTriggerRequestBuilder
         */
        public ConfigureTriggerRequestBuilder delay(String delay) {
            this.delay = delay;
            return this;
        }
        
        /**
         * Set triggerAt
         * @param triggerAt Trigger workflow on a specific date-time. Format - date string in ISO 8601 eg. \\\&quot;2022-08-27T20:14:51.643Z\\\&quot; (optional)
         * @return ConfigureTriggerRequestBuilder
         */
        public ConfigureTriggerRequestBuilder triggerAt(LocalDate triggerAt) {
            this.triggerAt = triggerAt;
            return this;
        }
        
        /**
         * Set brandId
         * @param brandId string identifier of the brand this workflow is associated with (optional)
         * @return ConfigureTriggerRequestBuilder
         */
        public ConfigureTriggerRequestBuilder brandId(String brandId) {
            this.brandId = brandId;
            return this;
        }
        
        /**
         * Set $idempotencyKey
         * @param $idempotencyKey Idempotency_key (valid for 24hrs) (optional)
         * @return ConfigureTriggerRequestBuilder
         */
        public ConfigureTriggerRequestBuilder $idempotencyKey(String $idempotencyKey) {
            this.$idempotencyKey = $idempotencyKey;
            return this;
        }
        
        /**
         * Build call for configureTrigger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest = buildBodyParams();
            return configureTriggerCall(workspaceKey, workflowConfigureTriggerRequest, _callback);
        }

        private WorkflowConfigureTriggerRequest buildBodyParams() {
            WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest = new WorkflowConfigureTriggerRequest();
            workflowConfigureTriggerRequest.name(this.name);
            workflowConfigureTriggerRequest.template(this.template);
            workflowConfigureTriggerRequest.notificationCategory(this.notificationCategory);
            workflowConfigureTriggerRequest.users(this.users);
            workflowConfigureTriggerRequest.data(this.data);
            workflowConfigureTriggerRequest.delivery(this.delivery);
            workflowConfigureTriggerRequest.delay(this.delay);
            workflowConfigureTriggerRequest.triggerAt(this.triggerAt);
            workflowConfigureTriggerRequest.brandId(this.brandId);
            workflowConfigureTriggerRequest.$idempotencyKey(this.$idempotencyKey);
            return workflowConfigureTriggerRequest;
        }

        /**
         * Execute configureTrigger request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = configureTriggerWithHttpInfo(workspaceKey, workflowConfigureTriggerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute configureTrigger request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest = buildBodyParams();
            return configureTriggerWithHttpInfo(workspaceKey, workflowConfigureTriggerRequest);
        }

        /**
         * Execute configureTrigger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            WorkflowConfigureTriggerRequest workflowConfigureTriggerRequest = buildBodyParams();
            return configureTriggerAsync(workspaceKey, workflowConfigureTriggerRequest, _callback);
        }
    }

    /**
     * Trigger Workflow
     * API to configure and trigger workflow dynamically
     * @param workspaceKey  (required)
     * @return ConfigureTriggerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public ConfigureTriggerRequestBuilder configureTrigger(String name, String template, String notificationCategory, List<WorkflowConfigureTriggerRequestUsersInner> users, String workspaceKey) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (template == null) throw new IllegalArgumentException("\"template\" is required but got null");
            

        if (notificationCategory == null) throw new IllegalArgumentException("\"notificationCategory\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
        if (workspaceKey == null) throw new IllegalArgumentException("\"workspaceKey\" is required but got null");
            

        return new ConfigureTriggerRequestBuilder(name, template, notificationCategory, users, workspaceKey);
    }
}
