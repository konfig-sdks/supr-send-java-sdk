/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BrandCreateOrUpdateRequest;
import com.konfigthis.client.model.BrandCreateOrUpdateRequestSocialLinks;
import com.konfigthis.client.model.BrandUpdateDefaultPreferenceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BrandApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BrandApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call brandDataGetCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/{brand_id}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandDataGetValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling brandDataGet(Async)");
        }

        return brandDataGetCall(brandId, _callback);

    }


    private ApiResponse<Object> brandDataGetWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = brandDataGetValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call brandDataGetAsync(String brandId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandDataGetValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BrandDataGetRequestBuilder {
        private final String brandId;

        private BrandDataGetRequestBuilder(String brandId) {
            this.brandId = brandId;
        }

        /**
         * Build call for brandDataGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return brandDataGetCall(brandId, _callback);
        }


        /**
         * Execute brandDataGet request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = brandDataGetWithHttpInfo(brandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute brandDataGet request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return brandDataGetWithHttpInfo(brandId);
        }

        /**
         * Execute brandDataGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return brandDataGetAsync(brandId, _callback);
        }
    }

    /**
     * Get Brand data
     * API to get brand settings corresponding to a brand id
     * @param brandId unique identifier of the brand you want to get the details for (required)
     * @return BrandDataGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public BrandDataGetRequestBuilder brandDataGet(String brandId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new BrandDataGetRequestBuilder(brandId);
    }
    private okhttp3.Call createOrUpdateCall(String brandId, String contentType, BrandCreateOrUpdateRequest brandCreateOrUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brandCreateOrUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/brand/{brand_id}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content - Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateValidateBeforeCall(String brandId, String contentType, BrandCreateOrUpdateRequest brandCreateOrUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling createOrUpdate(Async)");
        }

        return createOrUpdateCall(brandId, contentType, brandCreateOrUpdateRequest, _callback);

    }


    private ApiResponse<Object> createOrUpdateWithHttpInfo(String brandId, String contentType, BrandCreateOrUpdateRequest brandCreateOrUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(brandId, contentType, brandCreateOrUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateAsync(String brandId, String contentType, BrandCreateOrUpdateRequest brandCreateOrUpdateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(brandId, contentType, brandCreateOrUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateRequestBuilder {
        private final String brandName;
        private final String brandId;
        private String logo;
        private String primaryColor;
        private String secondaryColor;
        private String tertiaryColor;
        private String preferencePageUrl;
        private BrandCreateOrUpdateRequestSocialLinks socialLinks;
        private String properties;
        private String contentType;

        private CreateOrUpdateRequestBuilder(String brandName, String brandId) {
            this.brandName = brandName;
            this.brandId = brandId;
        }

        /**
         * Set logo
         * @param logo URL of the brand logo (optional, default to https://ik.imagekit.io/l0quatz6utm/suprsend/staging/media/suprsend-only-logo_c8aa27faef118418e8c5bd7b31a1cafc74e09200.png)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder logo(String logo) {
            this.logo = logo;
            return this;
        }
        
        /**
         * Set primaryColor
         * @param primaryColor Primary color of the brand - used for designing brand template. If you don&#39;t provide any of the colors for the brand, SuprSend will assume you want to use the default values, so color settings will automatically be set to the color settings of default brand. (optional, default to #ff0000)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder primaryColor(String primaryColor) {
            this.primaryColor = primaryColor;
            return this;
        }
        
        /**
         * Set secondaryColor
         * @param secondaryColor Secondary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates (optional, default to #00ff00)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder secondaryColor(String secondaryColor) {
            this.secondaryColor = secondaryColor;
            return this;
        }
        
        /**
         * Set tertiaryColor
         * @param tertiaryColor Tertiary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates (optional, default to #0000ff)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder tertiaryColor(String tertiaryColor) {
            this.tertiaryColor = tertiaryColor;
            return this;
        }
        
        /**
         * Set preferencePageUrl
         * @param preferencePageUrl Link of the hosted preference page inside the brand product (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder preferencePageUrl(String preferencePageUrl) {
            this.preferencePageUrl = preferencePageUrl;
            return this;
        }
        
        /**
         * Set socialLinks
         * @param socialLinks  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder socialLinks(BrandCreateOrUpdateRequestSocialLinks socialLinks) {
            this.socialLinks = socialLinks;
            return this;
        }
        
        /**
         * Set properties
         * @param properties Custom properties associated with the brand. Example value - &#x60;{\\\&quot;k1\\\&quot;: \\\&quot;v1\\\&quot;, \\\&quot;k2\\\&quot;: 1.0}&#x60; &lt;br&gt; Update operation on properties works like upsert on 1st-level keys (i.e. if top-level key doesn&#39;t already exist, then it will be added, otherwise its value will be replaced by the new value. All other key-value pairs will remain unchanged). (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder properties(String properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set contentType
         * @param contentType  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder contentType(String contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Build call for createOrUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BrandCreateOrUpdateRequest brandCreateOrUpdateRequest = buildBodyParams();
            return createOrUpdateCall(brandId, contentType, brandCreateOrUpdateRequest, _callback);
        }

        private BrandCreateOrUpdateRequest buildBodyParams() {
            BrandCreateOrUpdateRequest brandCreateOrUpdateRequest = new BrandCreateOrUpdateRequest();
            brandCreateOrUpdateRequest.brandName(this.brandName);
            brandCreateOrUpdateRequest.logo(this.logo);
            brandCreateOrUpdateRequest.primaryColor(this.primaryColor);
            brandCreateOrUpdateRequest.secondaryColor(this.secondaryColor);
            brandCreateOrUpdateRequest.tertiaryColor(this.tertiaryColor);
            brandCreateOrUpdateRequest.preferencePageUrl(this.preferencePageUrl);
            brandCreateOrUpdateRequest.socialLinks(this.socialLinks);
            brandCreateOrUpdateRequest.properties(this.properties);
            return brandCreateOrUpdateRequest;
        }

        /**
         * Execute createOrUpdate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BrandCreateOrUpdateRequest brandCreateOrUpdateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createOrUpdateWithHttpInfo(brandId, contentType, brandCreateOrUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BrandCreateOrUpdateRequest brandCreateOrUpdateRequest = buildBodyParams();
            return createOrUpdateWithHttpInfo(brandId, contentType, brandCreateOrUpdateRequest);
        }

        /**
         * Execute createOrUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BrandCreateOrUpdateRequest brandCreateOrUpdateRequest = buildBodyParams();
            return createOrUpdateAsync(brandId, contentType, brandCreateOrUpdateRequest, _callback);
        }
    }

    /**
     * Create / Update Brands
     * API to create a new Brand OR update an existing Brand
     * @param brandId unique identifier of the brand that you want to create / update (required)
     * @return CreateOrUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateRequestBuilder createOrUpdate(String brandName, String brandId) throws IllegalArgumentException {
        if (brandName == null) throw new IllegalArgumentException("\"brandName\" is required but got null");
            

        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new CreateOrUpdateRequestBuilder(brandName, brandId);
    }
    private okhttp3.Call getCategoriesCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/{brand_id}/category"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getCategories(Async)");
        }

        return getCategoriesCall(brandId, _callback);

    }


    private ApiResponse<Object> getCategoriesWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoriesAsync(String brandId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoriesRequestBuilder {
        private final String brandId;

        private GetCategoriesRequestBuilder(String brandId) {
            this.brandId = brandId;
        }

        /**
         * Build call for getCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoriesCall(brandId, _callback);
        }


        /**
         * Execute getCategories request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getCategoriesWithHttpInfo(brandId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategories request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getCategoriesWithHttpInfo(brandId);
        }

        /**
         * Execute getCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getCategoriesAsync(brandId, _callback);
        }
    }

    /**
     * Get Brand Default Preference
     * API to get Brand categories
     * @param brandId unique identifier of the brand you want to get default preferences for (required)
     * @return GetCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoriesRequestBuilder getCategories(String brandId) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        return new GetCategoriesRequestBuilder(brandId);
    }
    private okhttp3.Call listGetCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGetValidateBeforeCall(String limit, String offset, final ApiCallback _callback) throws ApiException {
        return listGetCall(limit, offset, _callback);

    }


    private ApiResponse<Object> listGetWithHttpInfo(String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = listGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGetAsync(String limit, String offset, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGetRequestBuilder {
        private String limit;
        private String offset;

        private ListGetRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit number of results to be returned in API response (optional, default to 20)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset starting position of brand list (optional, default to 0)
         * @return ListGetRequestBuilder
         */
        public ListGetRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGetCall(limit, offset, _callback);
        }


        /**
         * Execute listGet request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listGetWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGet request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listGetWithHttpInfo(limit, offset);
        }

        /**
         * Execute listGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listGetAsync(limit, offset, _callback);
        }
    }

    /**
     * Get Brand list
     * API to get the list of brands available in your workspace
     * @return ListGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListGetRequestBuilder listGet() throws IllegalArgumentException {
        return new ListGetRequestBuilder();
    }
    private okhttp3.Call updateDefaultPreferenceCall(String brandId, String categorySlug, BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = brandUpdateDefaultPreferenceRequest;

        // create path and map variables
        String localVarPath = "/v1/brand/{brand_id}/category/{category_slug}"
            .replace("{" + "brand_id" + "}", localVarApiClient.escapeString(brandId.toString()))
            .replace("{" + "category_slug" + "}", localVarApiClient.escapeString(categorySlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefaultPreferenceValidateBeforeCall(String brandId, String categorySlug, BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling updateDefaultPreference(Async)");
        }

        // verify the required parameter 'categorySlug' is set
        if (categorySlug == null) {
            throw new ApiException("Missing the required parameter 'categorySlug' when calling updateDefaultPreference(Async)");
        }

        return updateDefaultPreferenceCall(brandId, categorySlug, brandUpdateDefaultPreferenceRequest, _callback);

    }


    private ApiResponse<Object> updateDefaultPreferenceWithHttpInfo(String brandId, String categorySlug, BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDefaultPreferenceValidateBeforeCall(brandId, categorySlug, brandUpdateDefaultPreferenceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDefaultPreferenceAsync(String brandId, String categorySlug, BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefaultPreferenceValidateBeforeCall(brandId, categorySlug, brandUpdateDefaultPreferenceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDefaultPreferenceRequestBuilder {
        private final String brandId;
        private final String categorySlug;
        private String preference;
        private Boolean visibleToSubscriber;
        private List<String> mandatoryChannels;

        private UpdateDefaultPreferenceRequestBuilder(String brandId, String categorySlug) {
            this.brandId = brandId;
            this.categorySlug = categorySlug;
        }

        /**
         * Set preference
         * @param preference set &#x60;**opt_in**&#x60; to send notifications on all channels by default &lt;br&gt;  set &#x60;**opt_out**&#x60; to not send notifications in this category by default. For instance, **newsletter** &lt;br&gt;  set &#x60;**cant_unsubscribe**&#x60;if you do not want users to completely opt-out from this category. Notifications will always be sent on mandatory channels in this category. (optional, default to opt_in)
         * @return UpdateDefaultPreferenceRequestBuilder
         */
        public UpdateDefaultPreferenceRequestBuilder preference(String preference) {
            this.preference = preference;
            return this;
        }
        
        /**
         * Set visibleToSubscriber
         * @param visibleToSubscriber set it &#x60;false&#x60; to hide a category from user&#39;s preference page (optional)
         * @return UpdateDefaultPreferenceRequestBuilder
         */
        public UpdateDefaultPreferenceRequestBuilder visibleToSubscriber(Boolean visibleToSubscriber) {
            this.visibleToSubscriber = visibleToSubscriber;
            return this;
        }
        
        /**
         * Set mandatoryChannels
         * @param mandatoryChannels Add mandatory channels that the user can&#39;t unsubscribe from if preference is &#x60;cant_unsubscribe&#x60;. Add channels as &#x60;email&#x60;, &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;androidpush&#x60;, &#x60;inbox&#x60;, &#x60;iospush&#x60;, &#x60;slack&#x60;, &#x60;webpush&#x60; (optional)
         * @return UpdateDefaultPreferenceRequestBuilder
         */
        public UpdateDefaultPreferenceRequestBuilder mandatoryChannels(List<String> mandatoryChannels) {
            this.mandatoryChannels = mandatoryChannels;
            return this;
        }
        
        /**
         * Build call for updateDefaultPreference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest = buildBodyParams();
            return updateDefaultPreferenceCall(brandId, categorySlug, brandUpdateDefaultPreferenceRequest, _callback);
        }

        private BrandUpdateDefaultPreferenceRequest buildBodyParams() {
            BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest = new BrandUpdateDefaultPreferenceRequest();
            brandUpdateDefaultPreferenceRequest.preference(this.preference);
            brandUpdateDefaultPreferenceRequest.visibleToSubscriber(this.visibleToSubscriber);
            brandUpdateDefaultPreferenceRequest.mandatoryChannels(this.mandatoryChannels);
            return brandUpdateDefaultPreferenceRequest;
        }

        /**
         * Execute updateDefaultPreference request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateDefaultPreferenceWithHttpInfo(brandId, categorySlug, brandUpdateDefaultPreferenceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDefaultPreference request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest = buildBodyParams();
            return updateDefaultPreferenceWithHttpInfo(brandId, categorySlug, brandUpdateDefaultPreferenceRequest);
        }

        /**
         * Execute updateDefaultPreference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest = buildBodyParams();
            return updateDefaultPreferenceAsync(brandId, categorySlug, brandUpdateDefaultPreferenceRequest, _callback);
        }
    }

    /**
     * Update Brand Default Preference
     * API to update user default preferences for a brand
     * @param brandId unique identifier of the brand you want to update default preferences for (required)
     * @param categorySlug notification category slug. You can get this from Notification Categories page on SuprSend dashboard -&gt; Settings page (required)
     * @return UpdateDefaultPreferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDefaultPreferenceRequestBuilder updateDefaultPreference(String brandId, String categorySlug) throws IllegalArgumentException {
        if (brandId == null) throw new IllegalArgumentException("\"brandId\" is required but got null");
            

        if (categorySlug == null) throw new IllegalArgumentException("\"categorySlug\" is required but got null");
            

        return new UpdateDefaultPreferenceRequestBuilder(brandId, categorySlug);
    }
}
