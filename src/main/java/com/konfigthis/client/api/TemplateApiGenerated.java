/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TemplateGetContentChannelResponse;
import com.konfigthis.client.model.TemplateGetDetailsResponse;
import com.konfigthis.client.model.TemplateGetListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getContentChannelCall(String templateSlug, String channelSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template/{template_slug}/channel/{channel_slug}"
            .replace("{" + "template_slug" + "}", localVarApiClient.escapeString(templateSlug.toString()))
            .replace("{" + "channel_slug" + "}", localVarApiClient.escapeString(channelSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentChannelValidateBeforeCall(String templateSlug, String channelSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateSlug' is set
        if (templateSlug == null) {
            throw new ApiException("Missing the required parameter 'templateSlug' when calling getContentChannel(Async)");
        }

        // verify the required parameter 'channelSlug' is set
        if (channelSlug == null) {
            throw new ApiException("Missing the required parameter 'channelSlug' when calling getContentChannel(Async)");
        }

        return getContentChannelCall(templateSlug, channelSlug, _callback);

    }


    private ApiResponse<TemplateGetContentChannelResponse> getContentChannelWithHttpInfo(String templateSlug, String channelSlug) throws ApiException {
        okhttp3.Call localVarCall = getContentChannelValidateBeforeCall(templateSlug, channelSlug, null);
        Type localVarReturnType = new TypeToken<TemplateGetContentChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentChannelAsync(String templateSlug, String channelSlug, final ApiCallback<TemplateGetContentChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentChannelValidateBeforeCall(templateSlug, channelSlug, _callback);
        Type localVarReturnType = new TypeToken<TemplateGetContentChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentChannelRequestBuilder {
        private final String templateSlug;
        private final String channelSlug;

        private GetContentChannelRequestBuilder(String templateSlug, String channelSlug) {
            this.templateSlug = templateSlug;
            this.channelSlug = channelSlug;
        }

        /**
         * Build call for getContentChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentChannelCall(templateSlug, channelSlug, _callback);
        }


        /**
         * Execute getContentChannel request
         * @return TemplateGetContentChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TemplateGetContentChannelResponse execute() throws ApiException {
            ApiResponse<TemplateGetContentChannelResponse> localVarResp = getContentChannelWithHttpInfo(templateSlug, channelSlug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentChannel request with HTTP info returned
         * @return ApiResponse&lt;TemplateGetContentChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateGetContentChannelResponse> executeWithHttpInfo() throws ApiException {
            return getContentChannelWithHttpInfo(templateSlug, channelSlug);
        }

        /**
         * Execute getContentChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateGetContentChannelResponse> _callback) throws ApiException {
            return getContentChannelAsync(templateSlug, channelSlug, _callback);
        }
    }

    /**
     * Fetch Template content for a channel
     * APIs to fetch the content of a particular channel in a template group. It will return data for live and draft version of a template.
     * @param templateSlug Template group slug you want to fetch content details. You&#39;ll get the template slug by clicking on copy button next to template group name on SuprSend dashboard -&gt; template details page. (required)
     * @param channelSlug add one of the template channels  - &#x60;email&#x60;, &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;inbox&#x60;, &#x60;slack&#x60;, &#x60;androidpush&#x60;, &#x60;iospush&#x60;, &#x60;webpush&#x60; (required)
     * @return GetContentChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetContentChannelRequestBuilder getContentChannel(String templateSlug, String channelSlug) throws IllegalArgumentException {
        if (templateSlug == null) throw new IllegalArgumentException("\"templateSlug\" is required but got null");
            

        if (channelSlug == null) throw new IllegalArgumentException("\"channelSlug\" is required but got null");
            

        return new GetContentChannelRequestBuilder(templateSlug, channelSlug);
    }
    private okhttp3.Call getDetailsCall(String templateSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template/{template_slug}"
            .replace("{" + "template_slug" + "}", localVarApiClient.escapeString(templateSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String templateSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateSlug' is set
        if (templateSlug == null) {
            throw new ApiException("Missing the required parameter 'templateSlug' when calling getDetails(Async)");
        }

        return getDetailsCall(templateSlug, _callback);

    }


    private ApiResponse<TemplateGetDetailsResponse> getDetailsWithHttpInfo(String templateSlug) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(templateSlug, null);
        Type localVarReturnType = new TypeToken<TemplateGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String templateSlug, final ApiCallback<TemplateGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(templateSlug, _callback);
        Type localVarReturnType = new TypeToken<TemplateGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String templateSlug;

        private GetDetailsRequestBuilder(String templateSlug) {
            this.templateSlug = templateSlug;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(templateSlug, _callback);
        }


        /**
         * Execute getDetails request
         * @return TemplateGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TemplateGetDetailsResponse execute() throws ApiException {
            ApiResponse<TemplateGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(templateSlug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;TemplateGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(templateSlug);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(templateSlug, _callback);
        }
    }

    /**
     * Fetch Template details
     * APIs to fetch the content of a template group. It will return data for live and draft version of a template.
     * @param templateSlug Template group slug you want to fetch content details. You&#39;ll get the template slug by clicking on copy button next to template group name on SuprSend dashboard -&gt; template details page. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String templateSlug) throws IllegalArgumentException {
        if (templateSlug == null) throw new IllegalArgumentException("\"templateSlug\" is required but got null");
            

        return new GetDetailsRequestBuilder(templateSlug);
    }
    private okhttp3.Call getListCall(String hasTagIdsAny, String hasChannelsAny, Boolean isActive, Boolean isArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasTagIdsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_tag_ids_any", hasTagIdsAny));
        }

        if (hasChannelsAny != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_channels_any", hasChannelsAny));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_active", isActive));
        }

        if (isArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_archived", isArchived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String hasTagIdsAny, String hasChannelsAny, Boolean isActive, Boolean isArchived, final ApiCallback _callback) throws ApiException {
        return getListCall(hasTagIdsAny, hasChannelsAny, isActive, isArchived, _callback);

    }


    private ApiResponse<TemplateGetListResponse> getListWithHttpInfo(String hasTagIdsAny, String hasChannelsAny, Boolean isActive, Boolean isArchived) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(hasTagIdsAny, hasChannelsAny, isActive, isArchived, null);
        Type localVarReturnType = new TypeToken<TemplateGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String hasTagIdsAny, String hasChannelsAny, Boolean isActive, Boolean isArchived, final ApiCallback<TemplateGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(hasTagIdsAny, hasChannelsAny, isActive, isArchived, _callback);
        Type localVarReturnType = new TypeToken<TemplateGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private String hasTagIdsAny;
        private String hasChannelsAny;
        private Boolean isActive;
        private Boolean isArchived;

        private GetListRequestBuilder() {
        }

        /**
         * Set hasTagIdsAny
         * @param hasTagIdsAny comma separated string of tag ids attached to the template (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder hasTagIdsAny(String hasTagIdsAny) {
            this.hasTagIdsAny = hasTagIdsAny;
            return this;
        }
        
        /**
         * Set hasChannelsAny
         * @param hasChannelsAny comma separated string of channels. Returns templates which has any of the channels present from the channel string. Use these keys for channels - &#x60;email&#x60;, &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;inbox&#x60;, &#x60;slack&#x60;, &#x60;androidpush&#x60;, &#x60;iospush&#x60;, &#x60;webpush&#x60; (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder hasChannelsAny(String hasChannelsAny) {
            this.hasChannelsAny = hasChannelsAny;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive Set &#x60;true&#x60; for published templates, &#x60;false&#x60; for templates which are in draft. Do not pass this key to return all templates. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set isArchived
         * @param isArchived Set &#x60;true&#x60; to get archived templates, default &#x3D; &#x60;false&#x60; (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder isArchived(Boolean isArchived) {
            this.isArchived = isArchived;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(hasTagIdsAny, hasChannelsAny, isActive, isArchived, _callback);
        }


        /**
         * Execute getList request
         * @return TemplateGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TemplateGetListResponse execute() throws ApiException {
            ApiResponse<TemplateGetListResponse> localVarResp = getListWithHttpInfo(hasTagIdsAny, hasChannelsAny, isActive, isArchived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;TemplateGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(hasTagIdsAny, hasChannelsAny, isActive, isArchived);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateGetListResponse> _callback) throws ApiException {
            return getListAsync(hasTagIdsAny, hasChannelsAny, isActive, isArchived, _callback);
        }
    }

    /**
     * Fetch Template List
     * APIs to fetch the list of all templates in a workspace
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
}
