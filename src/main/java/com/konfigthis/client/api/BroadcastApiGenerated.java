/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BroadcastTriggerMessageListRequest;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BroadcastApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BroadcastApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BroadcastApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call triggerMessageListCall(String workspaceKey, BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = broadcastTriggerMessageListRequest;

        // create path and map variables
        String localVarPath = "/{workspace_key}/broadcast"
            .replace("{" + "workspace_key" + "}", localVarApiClient.escapeString(workspaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerMessageListValidateBeforeCall(String workspaceKey, BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceKey' is set
        if (workspaceKey == null) {
            throw new ApiException("Missing the required parameter 'workspaceKey' when calling triggerMessageList(Async)");
        }

        return triggerMessageListCall(workspaceKey, broadcastTriggerMessageListRequest, _callback);

    }


    private ApiResponse<Object> triggerMessageListWithHttpInfo(String workspaceKey, BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerMessageListValidateBeforeCall(workspaceKey, broadcastTriggerMessageListRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerMessageListAsync(String workspaceKey, BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerMessageListValidateBeforeCall(workspaceKey, broadcastTriggerMessageListRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerMessageListRequestBuilder {
        private final String listId;
        private final String template;
        private final String notificationCategory;
        private final String workspaceKey;
        private List<String> channels;
        private String data;
        private String delay;
        private LocalDate triggerAt;
        private String brandId;

        private TriggerMessageListRequestBuilder(String listId, String template, String notificationCategory, String workspaceKey) {
            this.listId = listId;
            this.template = template;
            this.notificationCategory = notificationCategory;
            this.workspaceKey = workspaceKey;
        }

        /**
         * Set channels
         * @param channels If set, broadcast will be sent only on the channels defined here irrespective of communication channels present in user profile. (optional)
         * @return TriggerMessageListRequestBuilder
         */
        public TriggerMessageListRequestBuilder channels(List<String> channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set data
         * @param data Mock data to replace the template variables. (optional, default to { \&quot;key\&quot;: { \&quot;k1\&quot;: \&quot;v1\&quot;, \&quot;k2\&quot;: \&quot;v2\&quot; } })
         * @return TriggerMessageListRequestBuilder
         */
        public TriggerMessageListRequestBuilder data(String data) {
            this.data = data;
            return this;
        }
        
        /**
         * Set delay
         * @param delay Broadcast will be halted for the time mentioned in delay, and become active once the delay period is over. Format - &#x60;XXdXXhXXmXXs&#x60; or if its number (n) then delay is in seconds (n) (optional)
         * @return TriggerMessageListRequestBuilder
         */
        public TriggerMessageListRequestBuilder delay(String delay) {
            this.delay = delay;
            return this;
        }
        
        /**
         * Set triggerAt
         * @param triggerAt Trigger broadcast on a specific date-time. Format - date string in ISO 8601 eg. \\\&quot;2022-08-27T20:14:51.643Z\\\&quot; (optional)
         * @return TriggerMessageListRequestBuilder
         */
        public TriggerMessageListRequestBuilder triggerAt(LocalDate triggerAt) {
            this.triggerAt = triggerAt;
            return this;
        }
        
        /**
         * Set brandId
         * @param brandId string identifier of the brand this broadcast is associated with (optional)
         * @return TriggerMessageListRequestBuilder
         */
        public TriggerMessageListRequestBuilder brandId(String brandId) {
            this.brandId = brandId;
            return this;
        }
        
        /**
         * Build call for triggerMessageList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest = buildBodyParams();
            return triggerMessageListCall(workspaceKey, broadcastTriggerMessageListRequest, _callback);
        }

        private BroadcastTriggerMessageListRequest buildBodyParams() {
            BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest = new BroadcastTriggerMessageListRequest();
            broadcastTriggerMessageListRequest.listId(this.listId);
            broadcastTriggerMessageListRequest.template(this.template);
            broadcastTriggerMessageListRequest.notificationCategory(this.notificationCategory);
            broadcastTriggerMessageListRequest.channels(this.channels);
            broadcastTriggerMessageListRequest.data(this.data);
            broadcastTriggerMessageListRequest.delay(this.delay);
            broadcastTriggerMessageListRequest.triggerAt(this.triggerAt);
            broadcastTriggerMessageListRequest.brandId(this.brandId);
            return broadcastTriggerMessageListRequest;
        }

        /**
         * Execute triggerMessageList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = triggerMessageListWithHttpInfo(workspaceKey, broadcastTriggerMessageListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerMessageList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest = buildBodyParams();
            return triggerMessageListWithHttpInfo(workspaceKey, broadcastTriggerMessageListRequest);
        }

        /**
         * Execute triggerMessageList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BroadcastTriggerMessageListRequest broadcastTriggerMessageListRequest = buildBodyParams();
            return triggerMessageListAsync(workspaceKey, broadcastTriggerMessageListRequest, _callback);
        }
    }

    /**
     * Trigger Broadcast
     * API to trigger broadcast messages on a list of users
     * @param workspaceKey  (required)
     * @return TriggerMessageListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public TriggerMessageListRequestBuilder triggerMessageList(String listId, String template, String notificationCategory, String workspaceKey) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (template == null) throw new IllegalArgumentException("\"template\" is required but got null");
            

        if (notificationCategory == null) throw new IllegalArgumentException("\"notificationCategory\" is required but got null");
            

        if (workspaceKey == null) throw new IllegalArgumentException("\"workspaceKey\" is required but got null");
            

        return new TriggerMessageListRequestBuilder(listId, template, notificationCategory, workspaceKey);
    }
}
