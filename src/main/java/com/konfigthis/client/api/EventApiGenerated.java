/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EventTriggerEventRequest;
import com.konfigthis.client.model.EventTriggerEventRequestUserOperationsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call triggerEventCall(EventTriggerEventRequest eventTriggerEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventTriggerEventRequest;

        // create path and map variables
        String localVarPath = "/event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerEventValidateBeforeCall(EventTriggerEventRequest eventTriggerEventRequest, final ApiCallback _callback) throws ApiException {
        return triggerEventCall(eventTriggerEventRequest, _callback);

    }


    private ApiResponse<Object> triggerEventWithHttpInfo(EventTriggerEventRequest eventTriggerEventRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerEventValidateBeforeCall(eventTriggerEventRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerEventAsync(EventTriggerEventRequest eventTriggerEventRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerEventValidateBeforeCall(eventTriggerEventRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerEventRequestBuilder {
        private final String distinctId;
        private final String event;
        private List<EventTriggerEventRequestUserOperationsInner> $userOperations;
        private String properties;
        private String brandId;
        private String $idempotencyKey;

        private TriggerEventRequestBuilder(String distinctId, String event) {
            this.distinctId = distinctId;
            this.event = event;
        }

        /**
         * Set $userOperations
         * @param $userOperations Creating &amp; updating users on SuprSend is done by sending an &#x60;$user_operations&#x60; event. All changes can be combined in one API call in an easy to replay format (optional)
         * @return TriggerEventRequestBuilder
         */
        public TriggerEventRequestBuilder $userOperations(List<EventTriggerEventRequestUserOperationsInner> $userOperations) {
            this.$userOperations = $userOperations;
            return this;
        }
        
        /**
         * Set properties
         * @param properties a dictionary representing event attributes like &#x60;first_name&#x60;. Event properties can be used to pass template variables in case of event based trigger (optional, default to {})
         * @return TriggerEventRequestBuilder
         */
        public TriggerEventRequestBuilder properties(String properties) {
            this.properties = properties;
            return this;
        }
        
        /**
         * Set brandId
         * @param brandId string identifier of the brand this event is associated with (optional)
         * @return TriggerEventRequestBuilder
         */
        public TriggerEventRequestBuilder brandId(String brandId) {
            this.brandId = brandId;
            return this;
        }
        
        /**
         * Set $idempotencyKey
         * @param $idempotencyKey Idempotency key (valid for 24hours) (optional)
         * @return TriggerEventRequestBuilder
         */
        public TriggerEventRequestBuilder $idempotencyKey(String $idempotencyKey) {
            this.$idempotencyKey = $idempotencyKey;
            return this;
        }
        
        /**
         * Build call for triggerEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventTriggerEventRequest eventTriggerEventRequest = buildBodyParams();
            return triggerEventCall(eventTriggerEventRequest, _callback);
        }

        private EventTriggerEventRequest buildBodyParams() {
            EventTriggerEventRequest eventTriggerEventRequest = new EventTriggerEventRequest();
            eventTriggerEventRequest.distinctId(this.distinctId);
            eventTriggerEventRequest.$userOperations(this.$userOperations);
            eventTriggerEventRequest.event(this.event);
            eventTriggerEventRequest.properties(this.properties);
            eventTriggerEventRequest.brandId(this.brandId);
            eventTriggerEventRequest.$idempotencyKey(this.$idempotencyKey);
            return eventTriggerEventRequest;
        }

        /**
         * Execute triggerEvent request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            EventTriggerEventRequest eventTriggerEventRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = triggerEventWithHttpInfo(eventTriggerEventRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerEvent request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            EventTriggerEventRequest eventTriggerEventRequest = buildBodyParams();
            return triggerEventWithHttpInfo(eventTriggerEventRequest);
        }

        /**
         * Execute triggerEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            EventTriggerEventRequest eventTriggerEventRequest = buildBodyParams();
            return triggerEventAsync(eventTriggerEventRequest, _callback);
        }
    }

    /**
     * Trigger an Event
     * API used to pass event which can then be used to trigger workflows created on SuprSend dashboard
     * @return TriggerEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 </td><td>  -  </td></tr>
     </table>
     */
    public TriggerEventRequestBuilder triggerEvent(String distinctId, String event) throws IllegalArgumentException {
        if (distinctId == null) throw new IllegalArgumentException("\"distinctId\" is required but got null");
            

        if (event == null) throw new IllegalArgumentException("\"event\" is required but got null");
            

        return new TriggerEventRequestBuilder(distinctId, event);
    }
}
