/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SubscriberAddToDraftListRequest;
import com.konfigthis.client.model.SubscriberAddToListRequest;
import com.konfigthis.client.model.SubscriberRemoveFromDraftListRequest;
import com.konfigthis.client.model.SubscriberUpdateUserPreferencesCategoryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriberApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriberApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriberApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToDraftListCall(String listId, String versionId, SubscriberAddToDraftListRequest subscriberAddToDraftListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriberAddToDraftListRequest;

        // create path and map variables
        String localVarPath = "/v1/subscriber_list/{list_id}/version/{version_id}/subscriber/add"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToDraftListValidateBeforeCall(String listId, String versionId, SubscriberAddToDraftListRequest subscriberAddToDraftListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addToDraftList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling addToDraftList(Async)");
        }

        return addToDraftListCall(listId, versionId, subscriberAddToDraftListRequest, _callback);

    }


    private ApiResponse<Object> addToDraftListWithHttpInfo(String listId, String versionId, SubscriberAddToDraftListRequest subscriberAddToDraftListRequest) throws ApiException {
        okhttp3.Call localVarCall = addToDraftListValidateBeforeCall(listId, versionId, subscriberAddToDraftListRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToDraftListAsync(String listId, String versionId, SubscriberAddToDraftListRequest subscriberAddToDraftListRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToDraftListValidateBeforeCall(listId, versionId, subscriberAddToDraftListRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToDraftListRequestBuilder {
        private final String listId;
        private final String versionId;
        private List<String> distinctIds;

        private AddToDraftListRequestBuilder(String listId, String versionId) {
            this.listId = listId;
            this.versionId = versionId;
        }

        /**
         * Set distinctIds
         * @param distinctIds Array of subscriber_ids, uniquely identifying the subscribers to be added to the list. (optional)
         * @return AddToDraftListRequestBuilder
         */
        public AddToDraftListRequestBuilder distinctIds(List<String> distinctIds) {
            this.distinctIds = distinctIds;
            return this;
        }
        
        /**
         * Build call for addToDraftList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriberAddToDraftListRequest subscriberAddToDraftListRequest = buildBodyParams();
            return addToDraftListCall(listId, versionId, subscriberAddToDraftListRequest, _callback);
        }

        private SubscriberAddToDraftListRequest buildBodyParams() {
            SubscriberAddToDraftListRequest subscriberAddToDraftListRequest = new SubscriberAddToDraftListRequest();
            subscriberAddToDraftListRequest.distinctIds(this.distinctIds);
            return subscriberAddToDraftListRequest;
        }

        /**
         * Execute addToDraftList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SubscriberAddToDraftListRequest subscriberAddToDraftListRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = addToDraftListWithHttpInfo(listId, versionId, subscriberAddToDraftListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToDraftList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SubscriberAddToDraftListRequest subscriberAddToDraftListRequest = buildBodyParams();
            return addToDraftListWithHttpInfo(listId, versionId, subscriberAddToDraftListRequest);
        }

        /**
         * Execute addToDraftList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SubscriberAddToDraftListRequest subscriberAddToDraftListRequest = buildBodyParams();
            return addToDraftListAsync(listId, versionId, subscriberAddToDraftListRequest, _callback);
        }
    }

    /**
     * Add Subscribers to Draft List
     * Add subscribers to a draft list with a version_id that uniquely identifies the draft list
     * @param listId Unique string idenitifier of the list to which user needs to be updated (required)
     * @param versionId Unique string idenitifier of the draft version of the list to which user needs to be updated (required)
     * @return AddToDraftListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddToDraftListRequestBuilder addToDraftList(String listId, String versionId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new AddToDraftListRequestBuilder(listId, versionId);
    }
    private okhttp3.Call addToListCall(String listId, SubscriberAddToListRequest subscriberAddToListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriberAddToListRequest;

        // create path and map variables
        String localVarPath = "/v1/subscriber_list/{list_id}/subscriber/add"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToListValidateBeforeCall(String listId, SubscriberAddToListRequest subscriberAddToListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addToList(Async)");
        }

        return addToListCall(listId, subscriberAddToListRequest, _callback);

    }


    private ApiResponse<Object> addToListWithHttpInfo(String listId, SubscriberAddToListRequest subscriberAddToListRequest) throws ApiException {
        okhttp3.Call localVarCall = addToListValidateBeforeCall(listId, subscriberAddToListRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToListAsync(String listId, SubscriberAddToListRequest subscriberAddToListRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToListValidateBeforeCall(listId, subscriberAddToListRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToListRequestBuilder {
        private final String listId;
        private List<String> distinctIds;

        private AddToListRequestBuilder(String listId) {
            this.listId = listId;
        }

        /**
         * Set distinctIds
         * @param distinctIds Array of subscriber_ids, uniquely identifying the subscribers to be added to the list. (optional)
         * @return AddToListRequestBuilder
         */
        public AddToListRequestBuilder distinctIds(List<String> distinctIds) {
            this.distinctIds = distinctIds;
            return this;
        }
        
        /**
         * Build call for addToList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriberAddToListRequest subscriberAddToListRequest = buildBodyParams();
            return addToListCall(listId, subscriberAddToListRequest, _callback);
        }

        private SubscriberAddToListRequest buildBodyParams() {
            SubscriberAddToListRequest subscriberAddToListRequest = new SubscriberAddToListRequest();
            subscriberAddToListRequest.distinctIds(this.distinctIds);
            return subscriberAddToListRequest;
        }

        /**
         * Execute addToList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SubscriberAddToListRequest subscriberAddToListRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = addToListWithHttpInfo(listId, subscriberAddToListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SubscriberAddToListRequest subscriberAddToListRequest = buildBodyParams();
            return addToListWithHttpInfo(listId, subscriberAddToListRequest);
        }

        /**
         * Execute addToList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SubscriberAddToListRequest subscriberAddToListRequest = buildBodyParams();
            return addToListAsync(listId, subscriberAddToListRequest, _callback);
        }
    }

    /**
     * Add Subscribers to List
     * API to add users / subscribers to the list
     * @param listId Unique string idenitifier of the list to which user needs to be updated (required)
     * @return AddToListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddToListRequestBuilder addToList(String listId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new AddToListRequestBuilder(listId);
    }
    private okhttp3.Call deleteDraftListCall(String listId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriber_list/{list_id}/version/{version_id}/delete"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDraftListValidateBeforeCall(String listId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteDraftList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling deleteDraftList(Async)");
        }

        return deleteDraftListCall(listId, versionId, _callback);

    }


    private ApiResponse<Object> deleteDraftListWithHttpInfo(String listId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = deleteDraftListValidateBeforeCall(listId, versionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDraftListAsync(String listId, String versionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDraftListValidateBeforeCall(listId, versionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDraftListRequestBuilder {
        private final String listId;
        private final String versionId;

        private DeleteDraftListRequestBuilder(String listId, String versionId) {
            this.listId = listId;
            this.versionId = versionId;
        }

        /**
         * Build call for deleteDraftList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDraftListCall(listId, versionId, _callback);
        }


        /**
         * Execute deleteDraftList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteDraftListWithHttpInfo(listId, versionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteDraftList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteDraftListWithHttpInfo(listId, versionId);
        }

        /**
         * Execute deleteDraftList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteDraftListAsync(listId, versionId, _callback);
        }
    }

    /**
     * Delete Draft List
     * API to delete a list created in your workspace
     * @param listId Unique string idenitifier of the list which you want to delete (required)
     * @param versionId Unique identifier of the draft version of the list which needs to be deleted (required)
     * @return DeleteDraftListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDraftListRequestBuilder deleteDraftList(String listId, String versionId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new DeleteDraftListRequestBuilder(listId, versionId);
    }
    private okhttp3.Call finishSyncDraftVersionCall(String listId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/subscriber_list/{list_id}/version/{version_id}/finish_sync"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finishSyncDraftVersionValidateBeforeCall(String listId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling finishSyncDraftVersion(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling finishSyncDraftVersion(Async)");
        }

        return finishSyncDraftVersionCall(listId, versionId, _callback);

    }


    private ApiResponse<Object> finishSyncDraftVersionWithHttpInfo(String listId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = finishSyncDraftVersionValidateBeforeCall(listId, versionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call finishSyncDraftVersionAsync(String listId, String versionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = finishSyncDraftVersionValidateBeforeCall(listId, versionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FinishSyncDraftVersionRequestBuilder {
        private final String listId;
        private final String versionId;

        private FinishSyncDraftVersionRequestBuilder(String listId, String versionId) {
            this.listId = listId;
            this.versionId = versionId;
        }

        /**
         * Build call for finishSyncDraftVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return finishSyncDraftVersionCall(listId, versionId, _callback);
        }


        /**
         * Execute finishSyncDraftVersion request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = finishSyncDraftVersionWithHttpInfo(listId, versionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute finishSyncDraftVersion request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return finishSyncDraftVersionWithHttpInfo(listId, versionId);
        }

        /**
         * Execute finishSyncDraftVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return finishSyncDraftVersionAsync(listId, versionId, _callback);
        }
    }

    /**
     * Finish Sync
     * Finishes the sync for a draft version and makes that particular version live for the given list_id
     * @param listId Unique string idenitifier of the list (required)
     * @param versionId Unique string idenitifier of the draft version of the list which needs to be made active(live) (required)
     * @return FinishSyncDraftVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public FinishSyncDraftVersionRequestBuilder finishSyncDraftVersion(String listId, String versionId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new FinishSyncDraftVersionRequestBuilder(listId, versionId);
    }
    private okhttp3.Call removeFromDraftListCall(String listId, String versionId, SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriberRemoveFromDraftListRequest;

        // create path and map variables
        String localVarPath = "/v1/subscriber_list/{list_id}/version/{version_id}/subscriber/remove"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromDraftListValidateBeforeCall(String listId, String versionId, SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling removeFromDraftList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling removeFromDraftList(Async)");
        }

        return removeFromDraftListCall(listId, versionId, subscriberRemoveFromDraftListRequest, _callback);

    }


    private ApiResponse<Object> removeFromDraftListWithHttpInfo(String listId, String versionId, SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest) throws ApiException {
        okhttp3.Call localVarCall = removeFromDraftListValidateBeforeCall(listId, versionId, subscriberRemoveFromDraftListRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromDraftListAsync(String listId, String versionId, SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromDraftListValidateBeforeCall(listId, versionId, subscriberRemoveFromDraftListRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFromDraftListRequestBuilder {
        private final String listId;
        private final String versionId;
        private List<String> distinctIds;

        private RemoveFromDraftListRequestBuilder(String listId, String versionId) {
            this.listId = listId;
            this.versionId = versionId;
        }

        /**
         * Set distinctIds
         * @param distinctIds Array of subscriber_ids, uniquely identifying the subscribers to be removed from the list. (optional)
         * @return RemoveFromDraftListRequestBuilder
         */
        public RemoveFromDraftListRequestBuilder distinctIds(List<String> distinctIds) {
            this.distinctIds = distinctIds;
            return this;
        }
        
        /**
         * Build call for removeFromDraftList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest = buildBodyParams();
            return removeFromDraftListCall(listId, versionId, subscriberRemoveFromDraftListRequest, _callback);
        }

        private SubscriberRemoveFromDraftListRequest buildBodyParams() {
            SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest = new SubscriberRemoveFromDraftListRequest();
            subscriberRemoveFromDraftListRequest.distinctIds(this.distinctIds);
            return subscriberRemoveFromDraftListRequest;
        }

        /**
         * Execute removeFromDraftList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = removeFromDraftListWithHttpInfo(listId, versionId, subscriberRemoveFromDraftListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFromDraftList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest = buildBodyParams();
            return removeFromDraftListWithHttpInfo(listId, versionId, subscriberRemoveFromDraftListRequest);
        }

        /**
         * Execute removeFromDraftList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SubscriberRemoveFromDraftListRequest subscriberRemoveFromDraftListRequest = buildBodyParams();
            return removeFromDraftListAsync(listId, versionId, subscriberRemoveFromDraftListRequest, _callback);
        }
    }

    /**
     * Remove Subscribers from Draft List
     * Remove subscribers from a draft list with a version_id that uniquely identifies the draft list
     * @param listId Unique string idenitifier of the list to which user needs to be updated (required)
     * @param versionId Unique string idenitifier of the draft version of the list to which user needs to be updated (required)
     * @return RemoveFromDraftListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromDraftListRequestBuilder removeFromDraftList(String listId, String versionId) throws IllegalArgumentException {
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new RemoveFromDraftListRequestBuilder(listId, versionId);
    }
    private okhttp3.Call updateUserPreferencesCategoryCall(String distinctId, String categorySlug, String tenantId, SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriberUpdateUserPreferencesCategoryRequest;

        // create path and map variables
        String localVarPath = "/v1/subscriber/{distinct_id}/category/{category_slug}"
            .replace("{" + "distinct_id" + "}", localVarApiClient.escapeString(distinctId.toString()))
            .replace("{" + "category_slug" + "}", localVarApiClient.escapeString(categorySlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserPreferencesCategoryValidateBeforeCall(String distinctId, String categorySlug, String tenantId, SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distinctId' is set
        if (distinctId == null) {
            throw new ApiException("Missing the required parameter 'distinctId' when calling updateUserPreferencesCategory(Async)");
        }

        // verify the required parameter 'categorySlug' is set
        if (categorySlug == null) {
            throw new ApiException("Missing the required parameter 'categorySlug' when calling updateUserPreferencesCategory(Async)");
        }

        return updateUserPreferencesCategoryCall(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest, _callback);

    }


    private ApiResponse<Object> updateUserPreferencesCategoryWithHttpInfo(String distinctId, String categorySlug, String tenantId, SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserPreferencesCategoryValidateBeforeCall(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserPreferencesCategoryAsync(String distinctId, String categorySlug, String tenantId, SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserPreferencesCategoryValidateBeforeCall(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserPreferencesCategoryRequestBuilder {
        private final String distinctId;
        private final String categorySlug;
        private String preference;
        private List<String> optOutChannels;
        private String tenantId;

        private UpdateUserPreferencesCategoryRequestBuilder(String distinctId, String categorySlug) {
            this.distinctId = distinctId;
            this.categorySlug = categorySlug;
        }

        /**
         * Set preference
         * @param preference choose one of the options: &#x60;opt_in&#x60; if the user has allowed notification in this category and &#x60;opt_out&#x60; if user wants to discontinue notification in this category (optional, default to opt_in)
         * @return UpdateUserPreferencesCategoryRequestBuilder
         */
        public UpdateUserPreferencesCategoryRequestBuilder preference(String preference) {
            this.preference = preference;
            return this;
        }
        
        /**
         * Set optOutChannels
         * @param optOutChannels Add array of channels if user wants to unsubscribe from particular channels in this category. Add channels as &#x60;email&#x60;, &#x60;sms&#x60;, whatsapp&#x60;, &#x60;androidpush&#x60;, &#x60;inbox&#x60;, &#x60;iospush&#x60;, &#x60;slack&#x60;, &#x60;webpush&#x60; (optional)
         * @return UpdateUserPreferencesCategoryRequestBuilder
         */
        public UpdateUserPreferencesCategoryRequestBuilder optOutChannels(List<String> optOutChannels) {
            this.optOutChannels = optOutChannels;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId to fetch user preferences for a particular brand (optional)
         * @return UpdateUserPreferencesCategoryRequestBuilder
         */
        public UpdateUserPreferencesCategoryRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for updateUserPreferencesCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest = buildBodyParams();
            return updateUserPreferencesCategoryCall(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest, _callback);
        }

        private SubscriberUpdateUserPreferencesCategoryRequest buildBodyParams() {
            SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest = new SubscriberUpdateUserPreferencesCategoryRequest();
            subscriberUpdateUserPreferencesCategoryRequest.preference(this.preference);
            subscriberUpdateUserPreferencesCategoryRequest.optOutChannels(this.optOutChannels);
            return subscriberUpdateUserPreferencesCategoryRequest;
        }

        /**
         * Execute updateUserPreferencesCategory request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateUserPreferencesCategoryWithHttpInfo(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserPreferencesCategory request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest = buildBodyParams();
            return updateUserPreferencesCategoryWithHttpInfo(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest);
        }

        /**
         * Execute updateUserPreferencesCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SubscriberUpdateUserPreferencesCategoryRequest subscriberUpdateUserPreferencesCategoryRequest = buildBodyParams();
            return updateUserPreferencesCategoryAsync(distinctId, categorySlug, tenantId, subscriberUpdateUserPreferencesCategoryRequest, _callback);
        }
    }

    /**
     * Update User Preferences (Category level)
     * API to update user category preferences
     * @param distinctId distinct_id of the user whose preferences should be fetched (required)
     * @param categorySlug notification category slug. You can get this from Notification Categories page on SuprSend dashboard -&gt; Settings page (required)
     * @return UpdateUserPreferencesCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserPreferencesCategoryRequestBuilder updateUserPreferencesCategory(String distinctId, String categorySlug) throws IllegalArgumentException {
        if (distinctId == null) throw new IllegalArgumentException("\"distinctId\" is required but got null");
            

        if (categorySlug == null) throw new IllegalArgumentException("\"categorySlug\" is required but got null");
            

        return new UpdateUserPreferencesCategoryRequestBuilder(distinctId, categorySlug);
    }
}
