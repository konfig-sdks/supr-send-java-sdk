/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BrandUpdateDefaultPreferenceRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BrandUpdateDefaultPreferenceRequest {
  public static final String SERIALIZED_NAME_PREFERENCE = "preference";
  @SerializedName(SERIALIZED_NAME_PREFERENCE)
  private String preference = "opt_in";

  public static final String SERIALIZED_NAME_VISIBLE_TO_SUBSCRIBER = "visible_to_subscriber";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_SUBSCRIBER)
  private Boolean visibleToSubscriber;

  public static final String SERIALIZED_NAME_MANDATORY_CHANNELS = "mandatory_channels";
  @SerializedName(SERIALIZED_NAME_MANDATORY_CHANNELS)
  private List<String> mandatoryChannels = null;

  public BrandUpdateDefaultPreferenceRequest() {
  }

  public BrandUpdateDefaultPreferenceRequest preference(String preference) {
    
    
    
    
    this.preference = preference;
    return this;
  }

   /**
   * set &#x60;**opt_in**&#x60; to send notifications on all channels by default &lt;br&gt;  set &#x60;**opt_out**&#x60; to not send notifications in this category by default. For instance, **newsletter** &lt;br&gt;  set &#x60;**cant_unsubscribe**&#x60;if you do not want users to completely opt-out from this category. Notifications will always be sent on mandatory channels in this category.
   * @return preference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "opt_in", value = "set `**opt_in**` to send notifications on all channels by default <br>  set `**opt_out**` to not send notifications in this category by default. For instance, **newsletter** <br>  set `**cant_unsubscribe**`if you do not want users to completely opt-out from this category. Notifications will always be sent on mandatory channels in this category.")

  public String getPreference() {
    return preference;
  }


  public void setPreference(String preference) {
    
    
    
    this.preference = preference;
  }


  public BrandUpdateDefaultPreferenceRequest visibleToSubscriber(Boolean visibleToSubscriber) {
    
    
    
    
    this.visibleToSubscriber = visibleToSubscriber;
    return this;
  }

   /**
   * set it &#x60;false&#x60; to hide a category from user&#39;s preference page
   * @return visibleToSubscriber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set it `false` to hide a category from user's preference page")

  public Boolean getVisibleToSubscriber() {
    return visibleToSubscriber;
  }


  public void setVisibleToSubscriber(Boolean visibleToSubscriber) {
    
    
    
    this.visibleToSubscriber = visibleToSubscriber;
  }


  public BrandUpdateDefaultPreferenceRequest mandatoryChannels(List<String> mandatoryChannels) {
    
    
    
    
    this.mandatoryChannels = mandatoryChannels;
    return this;
  }

  public BrandUpdateDefaultPreferenceRequest addMandatoryChannelsItem(String mandatoryChannelsItem) {
    if (this.mandatoryChannels == null) {
      this.mandatoryChannels = new ArrayList<>();
    }
    this.mandatoryChannels.add(mandatoryChannelsItem);
    return this;
  }

   /**
   * Add mandatory channels that the user can&#39;t unsubscribe from if preference is &#x60;cant_unsubscribe&#x60;. Add channels as &#x60;email&#x60;, &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;androidpush&#x60;, &#x60;inbox&#x60;, &#x60;iospush&#x60;, &#x60;slack&#x60;, &#x60;webpush&#x60;
   * @return mandatoryChannels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Add mandatory channels that the user can't unsubscribe from if preference is `cant_unsubscribe`. Add channels as `email`, `sms`, `whatsapp`, `androidpush`, `inbox`, `iospush`, `slack`, `webpush`")

  public List<String> getMandatoryChannels() {
    return mandatoryChannels;
  }


  public void setMandatoryChannels(List<String> mandatoryChannels) {
    
    
    
    this.mandatoryChannels = mandatoryChannels;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BrandUpdateDefaultPreferenceRequest instance itself
   */
  public BrandUpdateDefaultPreferenceRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandUpdateDefaultPreferenceRequest brandUpdateDefaultPreferenceRequest = (BrandUpdateDefaultPreferenceRequest) o;
    return Objects.equals(this.preference, brandUpdateDefaultPreferenceRequest.preference) &&
        Objects.equals(this.visibleToSubscriber, brandUpdateDefaultPreferenceRequest.visibleToSubscriber) &&
        Objects.equals(this.mandatoryChannels, brandUpdateDefaultPreferenceRequest.mandatoryChannels)&&
        Objects.equals(this.additionalProperties, brandUpdateDefaultPreferenceRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preference, visibleToSubscriber, mandatoryChannels, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandUpdateDefaultPreferenceRequest {\n");
    sb.append("    preference: ").append(toIndentedString(preference)).append("\n");
    sb.append("    visibleToSubscriber: ").append(toIndentedString(visibleToSubscriber)).append("\n");
    sb.append("    mandatoryChannels: ").append(toIndentedString(mandatoryChannels)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("preference");
    openapiFields.add("visible_to_subscriber");
    openapiFields.add("mandatory_channels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BrandUpdateDefaultPreferenceRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BrandUpdateDefaultPreferenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandUpdateDefaultPreferenceRequest is not found in the empty JSON string", BrandUpdateDefaultPreferenceRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("preference") != null && !jsonObj.get("preference").isJsonNull()) && !jsonObj.get("preference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preference").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mandatory_channels") != null && !jsonObj.get("mandatory_channels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandatory_channels` to be an array in the JSON string but got `%s`", jsonObj.get("mandatory_channels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandUpdateDefaultPreferenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandUpdateDefaultPreferenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandUpdateDefaultPreferenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandUpdateDefaultPreferenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandUpdateDefaultPreferenceRequest>() {
           @Override
           public void write(JsonWriter out, BrandUpdateDefaultPreferenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandUpdateDefaultPreferenceRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BrandUpdateDefaultPreferenceRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrandUpdateDefaultPreferenceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrandUpdateDefaultPreferenceRequest
  * @throws IOException if the JSON string is invalid with respect to BrandUpdateDefaultPreferenceRequest
  */
  public static BrandUpdateDefaultPreferenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandUpdateDefaultPreferenceRequest.class);
  }

 /**
  * Convert an instance of BrandUpdateDefaultPreferenceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

