/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BrandCreateOrUpdateRequestSocialLinks;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BrandCreateOrUpdateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BrandCreateOrUpdateRequest {
  public static final String SERIALIZED_NAME_BRAND_NAME = "brand_name";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName = "Awesome Brand";

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo = "https://ik.imagekit.io/l0quatz6utm/suprsend/staging/media/suprsend-only-logo_c8aa27faef118418e8c5bd7b31a1cafc74e09200.png";

  public static final String SERIALIZED_NAME_PRIMARY_COLOR = "primary_color";
  @SerializedName(SERIALIZED_NAME_PRIMARY_COLOR)
  private String primaryColor = "#ff0000";

  public static final String SERIALIZED_NAME_SECONDARY_COLOR = "secondary_color";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COLOR)
  private String secondaryColor = "#00ff00";

  public static final String SERIALIZED_NAME_TERTIARY_COLOR = "tertiary_color";
  @SerializedName(SERIALIZED_NAME_TERTIARY_COLOR)
  private String tertiaryColor = "#0000ff";

  public static final String SERIALIZED_NAME_PREFERENCE_PAGE_URL = "preference_page_url";
  @SerializedName(SERIALIZED_NAME_PREFERENCE_PAGE_URL)
  private String preferencePageUrl;

  public static final String SERIALIZED_NAME_SOCIAL_LINKS = "social_links";
  @SerializedName(SERIALIZED_NAME_SOCIAL_LINKS)
  private BrandCreateOrUpdateRequestSocialLinks socialLinks;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  public BrandCreateOrUpdateRequest() {
  }

  public BrandCreateOrUpdateRequest brandName(String brandName) {
    
    
    
    
    this.brandName = brandName;
    return this;
  }

   /**
   * Name of the brand. You can add company / organization name here
   * @return brandName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Awesome Brand", required = true, value = "Name of the brand. You can add company / organization name here")

  public String getBrandName() {
    return brandName;
  }


  public void setBrandName(String brandName) {
    
    
    
    this.brandName = brandName;
  }


  public BrandCreateOrUpdateRequest logo(String logo) {
    
    
    
    
    this.logo = logo;
    return this;
  }

   /**
   * URL of the brand logo
   * @return logo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://ik.imagekit.io/l0quatz6utm/suprsend/staging/media/suprsend-only-logo_c8aa27faef118418e8c5bd7b31a1cafc74e09200.png", value = "URL of the brand logo")

  public String getLogo() {
    return logo;
  }


  public void setLogo(String logo) {
    
    
    
    this.logo = logo;
  }


  public BrandCreateOrUpdateRequest primaryColor(String primaryColor) {
    
    
    
    
    this.primaryColor = primaryColor;
    return this;
  }

   /**
   * Primary color of the brand - used for designing brand template. If you don&#39;t provide any of the colors for the brand, SuprSend will assume you want to use the default values, so color settings will automatically be set to the color settings of default brand.
   * @return primaryColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#ff0000", value = "Primary color of the brand - used for designing brand template. If you don't provide any of the colors for the brand, SuprSend will assume you want to use the default values, so color settings will automatically be set to the color settings of default brand.")

  public String getPrimaryColor() {
    return primaryColor;
  }


  public void setPrimaryColor(String primaryColor) {
    
    
    
    this.primaryColor = primaryColor;
  }


  public BrandCreateOrUpdateRequest secondaryColor(String secondaryColor) {
    
    
    
    
    this.secondaryColor = secondaryColor;
    return this;
  }

   /**
   * Secondary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates
   * @return secondaryColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#00ff00", value = "Secondary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates")

  public String getSecondaryColor() {
    return secondaryColor;
  }


  public void setSecondaryColor(String secondaryColor) {
    
    
    
    this.secondaryColor = secondaryColor;
  }


  public BrandCreateOrUpdateRequest tertiaryColor(String tertiaryColor) {
    
    
    
    
    this.tertiaryColor = tertiaryColor;
    return this;
  }

   /**
   * Tertiary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates
   * @return tertiaryColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#0000ff", value = "Tertiary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates")

  public String getTertiaryColor() {
    return tertiaryColor;
  }


  public void setTertiaryColor(String tertiaryColor) {
    
    
    
    this.tertiaryColor = tertiaryColor;
  }


  public BrandCreateOrUpdateRequest preferencePageUrl(String preferencePageUrl) {
    
    
    
    
    this.preferencePageUrl = preferencePageUrl;
    return this;
  }

   /**
   * Link of the hosted preference page inside the brand product
   * @return preferencePageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Link of the hosted preference page inside the brand product")

  public String getPreferencePageUrl() {
    return preferencePageUrl;
  }


  public void setPreferencePageUrl(String preferencePageUrl) {
    
    
    
    this.preferencePageUrl = preferencePageUrl;
  }


  public BrandCreateOrUpdateRequest socialLinks(BrandCreateOrUpdateRequestSocialLinks socialLinks) {
    
    
    
    
    this.socialLinks = socialLinks;
    return this;
  }

   /**
   * Get socialLinks
   * @return socialLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BrandCreateOrUpdateRequestSocialLinks getSocialLinks() {
    return socialLinks;
  }


  public void setSocialLinks(BrandCreateOrUpdateRequestSocialLinks socialLinks) {
    
    
    
    this.socialLinks = socialLinks;
  }


  public BrandCreateOrUpdateRequest properties(String properties) {
    
    
    
    
    this.properties = properties;
    return this;
  }

   /**
   * Custom properties associated with the brand. Example value - &#x60;{\&quot;k1\&quot;: \&quot;v1\&quot;, \&quot;k2\&quot;: 1.0}&#x60; &lt;br&gt; Update operation on properties works like upsert on 1st-level keys (i.e. if top-level key doesn&#39;t already exist, then it will be added, otherwise its value will be replaced by the new value. All other key-value pairs will remain unchanged).
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom properties associated with the brand. Example value - `{\"k1\": \"v1\", \"k2\": 1.0}` <br> Update operation on properties works like upsert on 1st-level keys (i.e. if top-level key doesn't already exist, then it will be added, otherwise its value will be replaced by the new value. All other key-value pairs will remain unchanged).")

  public String getProperties() {
    return properties;
  }


  public void setProperties(String properties) {
    
    
    
    this.properties = properties;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BrandCreateOrUpdateRequest instance itself
   */
  public BrandCreateOrUpdateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandCreateOrUpdateRequest brandCreateOrUpdateRequest = (BrandCreateOrUpdateRequest) o;
    return Objects.equals(this.brandName, brandCreateOrUpdateRequest.brandName) &&
        Objects.equals(this.logo, brandCreateOrUpdateRequest.logo) &&
        Objects.equals(this.primaryColor, brandCreateOrUpdateRequest.primaryColor) &&
        Objects.equals(this.secondaryColor, brandCreateOrUpdateRequest.secondaryColor) &&
        Objects.equals(this.tertiaryColor, brandCreateOrUpdateRequest.tertiaryColor) &&
        Objects.equals(this.preferencePageUrl, brandCreateOrUpdateRequest.preferencePageUrl) &&
        Objects.equals(this.socialLinks, brandCreateOrUpdateRequest.socialLinks) &&
        Objects.equals(this.properties, brandCreateOrUpdateRequest.properties)&&
        Objects.equals(this.additionalProperties, brandCreateOrUpdateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandName, logo, primaryColor, secondaryColor, tertiaryColor, preferencePageUrl, socialLinks, properties, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandCreateOrUpdateRequest {\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    tertiaryColor: ").append(toIndentedString(tertiaryColor)).append("\n");
    sb.append("    preferencePageUrl: ").append(toIndentedString(preferencePageUrl)).append("\n");
    sb.append("    socialLinks: ").append(toIndentedString(socialLinks)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand_name");
    openapiFields.add("logo");
    openapiFields.add("primary_color");
    openapiFields.add("secondary_color");
    openapiFields.add("tertiary_color");
    openapiFields.add("preference_page_url");
    openapiFields.add("social_links");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("brand_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BrandCreateOrUpdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BrandCreateOrUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandCreateOrUpdateRequest is not found in the empty JSON string", BrandCreateOrUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrandCreateOrUpdateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("brand_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_name").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("primary_color") != null && !jsonObj.get("primary_color").isJsonNull()) && !jsonObj.get("primary_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_color").toString()));
      }
      if ((jsonObj.get("secondary_color") != null && !jsonObj.get("secondary_color").isJsonNull()) && !jsonObj.get("secondary_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_color").toString()));
      }
      if ((jsonObj.get("tertiary_color") != null && !jsonObj.get("tertiary_color").isJsonNull()) && !jsonObj.get("tertiary_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tertiary_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tertiary_color").toString()));
      }
      if ((jsonObj.get("preference_page_url") != null && !jsonObj.get("preference_page_url").isJsonNull()) && !jsonObj.get("preference_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preference_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preference_page_url").toString()));
      }
      // validate the optional field `social_links`
      if (jsonObj.get("social_links") != null && !jsonObj.get("social_links").isJsonNull()) {
        BrandCreateOrUpdateRequestSocialLinks.validateJsonObject(jsonObj.getAsJsonObject("social_links"));
      }
      if ((jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) && !jsonObj.get("properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandCreateOrUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandCreateOrUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandCreateOrUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandCreateOrUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandCreateOrUpdateRequest>() {
           @Override
           public void write(JsonWriter out, BrandCreateOrUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandCreateOrUpdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BrandCreateOrUpdateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrandCreateOrUpdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrandCreateOrUpdateRequest
  * @throws IOException if the JSON string is invalid with respect to BrandCreateOrUpdateRequest
  */
  public static BrandCreateOrUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandCreateOrUpdateRequest.class);
  }

 /**
  * Convert an instance of BrandCreateOrUpdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

