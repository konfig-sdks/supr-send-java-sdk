/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * delivery instructions for the workflow. You can set [Smart Delivery](https://docs.suprsend.com/docs/smart-delivery) preference by setting \&quot;smart\&quot;:true
 */
@ApiModel(description = "delivery instructions for the workflow. You can set [Smart Delivery](https://docs.suprsend.com/docs/smart-delivery) preference by setting \"smart\":true")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WorkflowConfigureTriggerRequestDelivery {
  public static final String SERIALIZED_NAME_SMART = "smart";
  @SerializedName(SERIALIZED_NAME_SMART)
  private Boolean smart = false;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private String success = "seen";

  public static final String SERIALIZED_NAME_TIME_TO_LIVE = "time_to_live";
  @SerializedName(SERIALIZED_NAME_TIME_TO_LIVE)
  private String timeToLive;

  public static final String SERIALIZED_NAME_MANDATORY_CHANNELS = "mandatory_channels";
  @SerializedName(SERIALIZED_NAME_MANDATORY_CHANNELS)
  private List<String> mandatoryChannels = null;

  public WorkflowConfigureTriggerRequestDelivery() {
  }

  public WorkflowConfigureTriggerRequestDelivery smart(Boolean smart) {
    
    
    
    
    this.smart = smart;
    return this;
  }

   /**
   * You can enable smart delivery by setting \&quot;smart\&quot;:True
   * @return smart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "You can enable smart delivery by setting \"smart\":True")

  public Boolean getSmart() {
    return smart;
  }


  public void setSmart(Boolean smart) {
    
    
    
    this.smart = smart;
  }


  public WorkflowConfigureTriggerRequestDelivery success(String success) {
    
    
    
    
    this.success = success;
    return this;
  }

   /**
   * Measure that defines the success of this notification. You can set notification status like delivery, interaction or custom success event
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "seen", value = "Measure that defines the success of this notification. You can set notification status like delivery, interaction or custom success event")

  public String getSuccess() {
    return success;
  }


  public void setSuccess(String success) {
    
    
    
    this.success = success;
  }


  public WorkflowConfigureTriggerRequestDelivery timeToLive(String timeToLive) {
    
    
    
    
    this.timeToLive = timeToLive;
    return this;
  }

   /**
   * Time window for triggering notifications in case of smart delivery. notification on each channel will be sent with time-interval of [time_to_live / (number_of_channels - 1)] apart. Format - XXdXXhXXmXXs or if its number (n) then delay is in seconds (n)
   * @return timeToLive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time window for triggering notifications in case of smart delivery. notification on each channel will be sent with time-interval of [time_to_live / (number_of_channels - 1)] apart. Format - XXdXXhXXmXXs or if its number (n) then delay is in seconds (n)")

  public String getTimeToLive() {
    return timeToLive;
  }


  public void setTimeToLive(String timeToLive) {
    
    
    
    this.timeToLive = timeToLive;
  }


  public WorkflowConfigureTriggerRequestDelivery mandatoryChannels(List<String> mandatoryChannels) {
    
    
    
    
    this.mandatoryChannels = mandatoryChannels;
    return this;
  }

  public WorkflowConfigureTriggerRequestDelivery addMandatoryChannelsItem(String mandatoryChannelsItem) {
    if (this.mandatoryChannels == null) {
      this.mandatoryChannels = new ArrayList<>();
    }
    this.mandatoryChannels.add(mandatoryChannelsItem);
    return this;
  }

   /**
   * Channels on which notification has to be sent immediately in case of smart delivery. Following channel keys can be used: email, sms, whatsapp, androidpush, iospush, slack, webpush
   * @return mandatoryChannels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channels on which notification has to be sent immediately in case of smart delivery. Following channel keys can be used: email, sms, whatsapp, androidpush, iospush, slack, webpush")

  public List<String> getMandatoryChannels() {
    return mandatoryChannels;
  }


  public void setMandatoryChannels(List<String> mandatoryChannels) {
    
    
    
    this.mandatoryChannels = mandatoryChannels;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WorkflowConfigureTriggerRequestDelivery instance itself
   */
  public WorkflowConfigureTriggerRequestDelivery putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowConfigureTriggerRequestDelivery workflowConfigureTriggerRequestDelivery = (WorkflowConfigureTriggerRequestDelivery) o;
    return Objects.equals(this.smart, workflowConfigureTriggerRequestDelivery.smart) &&
        Objects.equals(this.success, workflowConfigureTriggerRequestDelivery.success) &&
        Objects.equals(this.timeToLive, workflowConfigureTriggerRequestDelivery.timeToLive) &&
        Objects.equals(this.mandatoryChannels, workflowConfigureTriggerRequestDelivery.mandatoryChannels)&&
        Objects.equals(this.additionalProperties, workflowConfigureTriggerRequestDelivery.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(smart, success, timeToLive, mandatoryChannels, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowConfigureTriggerRequestDelivery {\n");
    sb.append("    smart: ").append(toIndentedString(smart)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    timeToLive: ").append(toIndentedString(timeToLive)).append("\n");
    sb.append("    mandatoryChannels: ").append(toIndentedString(mandatoryChannels)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("smart");
    openapiFields.add("success");
    openapiFields.add("time_to_live");
    openapiFields.add("mandatory_channels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowConfigureTriggerRequestDelivery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WorkflowConfigureTriggerRequestDelivery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowConfigureTriggerRequestDelivery is not found in the empty JSON string", WorkflowConfigureTriggerRequestDelivery.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("success") != null && !jsonObj.get("success").isJsonNull()) && !jsonObj.get("success").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success").toString()));
      }
      if ((jsonObj.get("time_to_live") != null && !jsonObj.get("time_to_live").isJsonNull()) && !jsonObj.get("time_to_live").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_to_live` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_to_live").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mandatory_channels") != null && !jsonObj.get("mandatory_channels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandatory_channels` to be an array in the JSON string but got `%s`", jsonObj.get("mandatory_channels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowConfigureTriggerRequestDelivery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowConfigureTriggerRequestDelivery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowConfigureTriggerRequestDelivery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowConfigureTriggerRequestDelivery.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowConfigureTriggerRequestDelivery>() {
           @Override
           public void write(JsonWriter out, WorkflowConfigureTriggerRequestDelivery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowConfigureTriggerRequestDelivery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WorkflowConfigureTriggerRequestDelivery instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowConfigureTriggerRequestDelivery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowConfigureTriggerRequestDelivery
  * @throws IOException if the JSON string is invalid with respect to WorkflowConfigureTriggerRequestDelivery
  */
  public static WorkflowConfigureTriggerRequestDelivery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowConfigureTriggerRequestDelivery.class);
  }

 /**
  * Convert an instance of WorkflowConfigureTriggerRequestDelivery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

