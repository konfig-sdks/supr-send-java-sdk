/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PreferenceUpdateChannelPreferencesRequest;
import com.konfigthis.client.model.PreferenceUpdateChannelPreferencesRequestChannelPreferencesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PreferenceApi
 */
@Disabled
public class PreferenceApiTest {

    private static PreferenceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PreferenceApi(apiClient);
    }

    /**
     * Get User Preferences (Channel level)
     *
     * API to get user channel preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserChannelPreferencesTest() throws ApiException {
        String distinctId = null;
        String tenantId = null;
        Object response = api.getUserChannelPreferences(distinctId)
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update User Preferences (Channel level)
     *
     * API to update user channel preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelPreferencesTest() throws ApiException {
        String distinctId = null;
        List<PreferenceUpdateChannelPreferencesRequestChannelPreferencesInner> channelPreferences = null;
        String tenantId = null;
        Object response = api.updateChannelPreferences(distinctId)
                .channelPreferences(channelPreferences)
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

}
