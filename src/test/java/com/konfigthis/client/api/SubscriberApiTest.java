/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.SubscriberAddToDraftListRequest;
import com.konfigthis.client.model.SubscriberAddToListRequest;
import com.konfigthis.client.model.SubscriberRemoveFromDraftListRequest;
import com.konfigthis.client.model.SubscriberUpdateUserPreferencesCategoryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriberApi
 */
@Disabled
public class SubscriberApiTest {

    private static SubscriberApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SubscriberApi(apiClient);
    }

    /**
     * Add Subscribers to Draft List
     *
     * Add subscribers to a draft list with a version_id that uniquely identifies the draft list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToDraftListTest() throws ApiException {
        String listId = null;
        String versionId = null;
        List<String> distinctIds = null;
        Object response = api.addToDraftList(listId, versionId)
                .distinctIds(distinctIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Add Subscribers to List
     *
     * API to add users / subscribers to the list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToListTest() throws ApiException {
        String listId = null;
        List<String> distinctIds = null;
        Object response = api.addToList(listId)
                .distinctIds(distinctIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Draft List
     *
     * API to delete a list created in your workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDraftListTest() throws ApiException {
        String listId = null;
        String versionId = null;
        Object response = api.deleteDraftList(listId, versionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Finish Sync
     *
     * Finishes the sync for a draft version and makes that particular version live for the given list_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finishSyncDraftVersionTest() throws ApiException {
        String listId = null;
        String versionId = null;
        Object response = api.finishSyncDraftVersion(listId, versionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Subscribers from Draft List
     *
     * Remove subscribers from a draft list with a version_id that uniquely identifies the draft list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromDraftListTest() throws ApiException {
        String listId = null;
        String versionId = null;
        List<String> distinctIds = null;
        Object response = api.removeFromDraftList(listId, versionId)
                .distinctIds(distinctIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Update User Preferences (Category level)
     *
     * API to update user category preferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPreferencesCategoryTest() throws ApiException {
        String distinctId = null;
        String categorySlug = null;
        String preference = null;
        List<String> optOutChannels = null;
        String tenantId = null;
        Object response = api.updateUserPreferencesCategory(distinctId, categorySlug)
                .preference(preference)
                .optOutChannels(optOutChannels)
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

}
