/*
 * SuprSend API
 * SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BrandCreateOrUpdateRequest;
import com.konfigthis.client.model.BrandCreateOrUpdateRequestSocialLinks;
import com.konfigthis.client.model.BrandUpdateDefaultPreferenceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BrandApi
 */
@Disabled
public class BrandApiTest {

    private static BrandApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BrandApi(apiClient);
    }

    /**
     * Get Brand data
     *
     * API to get brand settings corresponding to a brand id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void brandDataGetTest() throws ApiException {
        String brandId = null;
        Object response = api.brandDataGet(brandId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create / Update Brands
     *
     * API to create a new Brand OR update an existing Brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateTest() throws ApiException {
        String brandName = null;
        String brandId = null;
        String logo = null;
        String primaryColor = null;
        String secondaryColor = null;
        String tertiaryColor = null;
        String preferencePageUrl = null;
        BrandCreateOrUpdateRequestSocialLinks socialLinks = null;
        String properties = null;
        String contentType = null;
        Object response = api.createOrUpdate(brandName, brandId)
                .logo(logo)
                .primaryColor(primaryColor)
                .secondaryColor(secondaryColor)
                .tertiaryColor(tertiaryColor)
                .preferencePageUrl(preferencePageUrl)
                .socialLinks(socialLinks)
                .properties(properties)
                .contentType(contentType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Brand Default Preference
     *
     * API to get Brand categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoriesTest() throws ApiException {
        String brandId = null;
        Object response = api.getCategories(brandId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Brand list
     *
     * API to get the list of brands available in your workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGetTest() throws ApiException {
        String limit = null;
        String offset = null;
        Object response = api.listGet()
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Brand Default Preference
     *
     * API to update user default preferences for a brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDefaultPreferenceTest() throws ApiException {
        String brandId = null;
        String categorySlug = null;
        String preference = null;
        Boolean visibleToSubscriber = null;
        List<String> mandatoryChannels = null;
        Object response = api.updateDefaultPreference(brandId, categorySlug)
                .preference(preference)
                .visibleToSubscriber(visibleToSubscriber)
                .mandatoryChannels(mandatoryChannels)
                .execute();
        // TODO: test validations
    }

}
